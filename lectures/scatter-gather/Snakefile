import os

samples = ["sample1", "sample2"]

splits = 5
scatteritems = range(1, splits+1)

wildcard_constraints:
    scatteritems = "\d+",
    sample = "[\w\d\-\.]+"

rule all:
    input:
        expand("{sample}.rc.fastq", sample = samples)

rule scatter:
    output:
        expand("splits/{{sample}}/{{sample}}.{scatteritem}.fastq", scatteritem = scatteritems)
    input:
        "data/{sample}.fastq"
    log:
        "logs/{sample}.scatter.log"
    conda:
        "envs/seqkit.yml"
    params:
        parts = splits,
        outdir = lambda wildcards, output: os.path.dirname(output[0])
    shell:
        """ 
        seqkit split -p {params.parts} -O {params.outdir} {input} > {log} 2>&1
        rename 's/part_0*//' {params.outdir}/{wildcards.sample}.*.fastq
        """

rule reversecomplement:
    output:
        "rc/{sample}/{sample}.{scatteritem}.rc.fastq"
    input:
        "splits/{sample}/{sample}.{scatteritem}.fastq"
    conda:
        "envs/seqkit.yml"
    shell:
        """
        seqkit seq --reverse --complement {input} > {output}
        """

rule gather:
    output:
        "{sample}.rc.fastq"
    input:
        expand("rc/{{sample}}/{{sample}}.{scatteritem}.rc.fastq", scatteritem = scatteritems)
    shell:
        "cat {input} > {output}"